proccessBegin[stLoaderPlayer] calls addEntryResource[ftManager] that calls load[ftSlot]
scine add entry resource calls lost[ftslt], ftslot seems to have something to do with entry at least
load[ftSlot] r5 controls what gets loaded (bot resource, entry resource, or result resource)

position updated at updatePosture[stageObject] after call to getPos at 8070efc4
setPos at 8072e898 sets position

unmarked memset @ 8000443c
need to add to map

updateCall[ftAudienceImpl]:
    @ 8081a88c
    takes 1 arg
    called a bunch, but doesn't do anything unless a cheer is active

checkCall[ftAudienceImpl]:
    @ 8081ad54
    called at 8081b3e0
    is used to determine if should start cheer, and starts it if it is
    Takes 2 args
    If this is the only function that determines cheers, it means CPUs can't get cheers, and apparently damage has to be over 100 to get a cheer

createHeap[gfHeapManager]:
    @ 80024544
    (there is another overloaded version that calls this)
    Seems like a static function (the other version may not be)
    The other version calls this multiple times, creating a bunch of heaps
    r3: heap ID
    r4: char* (name of heap)
    r5: bool (false if should be allocatd in MEM1, true if in MEM2)
    r6: size
    seems to return void

OSCreateThread:
    @ 801e0cfc
    This is taken from the OS documentation pdf
    r3: OSThread*
    r4: start routine function ptr
    r5: argument to pass to start routine (this is passed directly to start routine)
    r6: address of thread stack + size of thread stack (basically where the stack should begin)
    r7: size of thread stack
    r8: thread priority (0 is highest, 31 is lowest)
    r9: whether the thread is detatched (dunno what that means)
    returns bool

    The thread will write a magic word into the end of the stack, which can be used to determine if there was an overflow

createThread[gfThread]:
    @ 8002f628
    (I think r3 is a generic gfThread, and the only value it has is the ptr to the function table)
    r3: gfThread* (this is just a mostly empty buffer.  offset 0 needs to be set to 0x804208b0)
    (I think r4 is where the thread will be written to.  Seems r3 and r4 can be the same)
    r4: same as r3
    r5: 

writeRequest[gfFileIOHandle]:
    @ 80021d54
    r3:
    r4: full path to file (use sd:/ instead of A)
    r5: void* data
    r6: size of data
    r7: setting (0 = w, 1 = a)

push[gfFileIOManager]:
    @ 80023494
    r3: gfFileIOManager*
    r4: gfFileIORequest
    adds the file IO request to the queue

NETCalcCRC32:
    @ 8038ee84
    r3: void* data
    r4: int size
    returns (hash?) in r3

setNameRumbleSwitch[GameGlobal]:
    r3: GameGlobal*
    @ 8004d97c
    This is apparently a switch statement that does things involving the rumble settings
    @ 8004d9dc:
        returns global rumble setting ?

getDistrubitionType[GameBlobal]:
    @ 8004eac8
    r3: GameGlobal*
    returns distubution type

getWiiID[nteGlobal]:
    @ 8014feb4
    returns wii ID in r3 and r4 (long)

nteFileDataReplay:
    4: heap
    8: funtion table ptr
    C: ptr to section?
    10: size of replay (doesn't include section header)


dispThumbnail[muReplayTask]:
    @ 811986cc
    given r3, r4, r5
    [r5 + 0xC] = replayInfoThing*
    if it returns 0, the stage picture isn't displayed

dispReplayCore[muReplayTask] (unkonwn if real name):
    @ 81198920
    displays the match type, character icons, and character names
    called once per frame
    r3: almost certainly muReplayTask
    r4: a ptr to something that contains the replay data

ftInit:
    r3: ftSlot ptr
    r4: char id
    r5: color id
    r6: always 0?
    r7: num chars (ice climbers are 2)

static method getClassInfo[ftClassInfo]:
    give char id? and get back something

update/[IpHuman]:
    r3: *IpHuman
    r4: port?

checkTransition[soStatusModuleImpl]:
    @ 8071011c
    r3: soStatusModuleImpl
    r4: soModuleAccessor

getPlayerNo[ipPadCOnfig]:
    r3: *IpPadConfig
    r4: port num (0 based, wiimotes have higher indeices)

getPlayerNo[ftManager]:
    r3: ftManager*
    r4: entryID

getInput[Fighter]:
    @ 8083ae38
    r3: Fighter*
    returns IpHuman*

run[gfPadReadThread]:
    @ 8002b9c4
    sets up pad read thread
    seems to set polling frequency @ 8002ba70

getSubFighter[ftManager]:
    @ 80814fb8
    if the gmKind != 0x10, the function returns null

get_aiStat[aiMgr]:
    r3: aiChrIdx*
    returns aiChrIdx

getPlayerNo[aiMgr]:
    r3: aiMgr*

getFighterNo:
    @ 808fd6d0
    r3: aiChrIdx (or aiMgr)
    returns 0 if normal fighter, 1 if follower

getStatusKind[soStatusModuleImpl]:
    @ 8077feac
    r3: soStatusModuleImpl*
    returns actionID

getDamage[ftOwner]:
    @ 8081c264
    r3: ftOwner*
    returns percent as float in f1

getTotalDamage[ftOwner]:
    @ 8081c270
    r3: ftOwner*
    returns total damage taken in the match in f1

getHitPoint[ftOwner]:
    @ 8081c2f8
    r3: ftOwner*
    probbaly returns stanima points remanining

getOwner[Fighter]:
    @ 8083ae24
    r3: Fighter*
    returns ftOwner* in r3

getOwner[ftManager]:
    @ 808159e4
    r3: ftManager*
    r4: entryID
    returns ftOwner*

getFighter[ftManager]:
    @ 80814f20
    r3: ftManager*
    r4: entryID
    r5: is used for something, not sure what it does (set to -1 in one case)
    returns Fighter*

extractPadStatus[ipKeyRecorder]:
    @ 8004bfa0
    r3: ipKeyRecorder*
    r4: Where to store inputs (ipSwitch + 8)
    r5: where to get replay data from

update[ipSwitch]:
    @ 8004a9ec
    This function always runs once every frame
    converts buttons to game inputs
    Also writes inputs to replay buffer
    There are special segments that only run depending on if it is a replay or in game
    replay-only section starts at: 8004ab48
    game only sections starts at: 8004ab8c

getNumPic[muCollectionViewer]:
    @ 8119833c (not always loaded)
    seems to return how many pictures are loaded

onDecided[muReplayTask]:
    @ 81198090
    run when press A on replay
    gets file id of selected replay @ 811980b8
    gets name of file @ 811980d4
    sets up loading screen @ 811981a4 Still runs replay, just no loading screen
    sets scene transition flag to 4 @ 81198188  This makes the replay start loading


dispThumbnail[muReplayTask]:
    @ 811986cc
    seems to control displaying at least the stage, possibly everything
    Only runs when movement happens, but runs once for everything
    Is actually several functions in the map
    ends at dispPreviewStage @ 8119891c


getInstance[ipSwitch]:
    @ 8004a750
    static function, takes no args
    returns ipSwitch*

setData[nteFileDataReplay]:
    @ 80152c4c
    r3: nteFileDataReplay (small object, seems to be created just for this)
    r4: replay buffer start
    r5: size to save
    returns nothing

setMelee[muReplayTask]:
    @ 8119841c (not always loaded)
    sets up game for replay
    r3: muReplayTask*

FAFopen:
    @ 803ebeb8
    r3: string* (path to file, root directory A:/ for SD?)
    r4: string* (write access mode, w, r, wa, ect)
    returns FILE*

FAFClose:
    @ 803ebe8c
    r3: FILE*
    returns 0 if succesful

FAFRead:
    total amount read is size * num
    @ 803ebee4
    r3: void* (loacation to store data)
    r4: unsigned int (size of each element to read)
    r5: unsigned int (number of elemeents to read)
    r6: FILE*
    returns number of elements read

FAFWrite:
    total amount write is size * num
    @ 803ebf98
    r3: void* (data to write)
    r4: unsigned int (size of each element to read)
    r5: unsigned int (number of elemeents to read)
    r6: FILE*
    returns number of elements written

writeSD[gfFileIO]:
    @ 8001d740
    r3: gfFileIO*

checkSDInserted:
    @ 8001bcfc
    no args
    returns if SD is inserted I guess

run[gfCollectionIO]:
    @ 80038da4 (doesn't always exist, loaded when in replay menu)
    r3: gfCollectionIO*
    looks for all files to load and loads them

findFirstFile[gfFileIO]:
    @ 8001f690
    r3: gfFileIO
    can find the a file given by a path
    path can have stuff like * (might be full regex?) (just wwildcard it seems)

SetFont[ms10CharWriterFQ28Font]:
    @ 8006ee5c
    r3: writer*, also Message*
    r4: font number? 9 seems to let it load what it wants, anything else is used directly

isReadySlot[ftManager]:
    @ 80813ea4
    r3: technically ftManager ptr, but is unused
    r4: slot number
    returns 1 if slot is ready for use (has loaded), else 0
    not sure what it returns if stalling in replay

isReady[ftSlot]:
    @ 8082b22c
    r3: ftSlot ptr
    returns 1 if slot is ready for use (has loaded), else 0
    not sure what it returns if stalling in replay

isReady[gfFileIOHandle]:
    Used for checking if files have loaded in general
    @ 80021f38
    r3: gfFileIOHandle ptr
    returns 1 if file is ready for use, else 0
    forcing it to return 0 causes stuff like Zelda to never finish transforming

update[gfFileIOManager]:
    @ 80022f84
    sets isReady flag for gfFileIORequest @ 800231e0
    When this happens during recording, calls setSyncCommand right after @ 80023228


sdio_ReadSectors:
    @ 80b12b74
    part of the Dolphin initial symbols stuff, don't think it's in symbol map
    r3: start sector
    r4: num sectors
    r5: dest


SIGetResponse:
    @ 801e6c38
    Reads raw GCC inputs
    r3: port, 0 based
    r4: address to store result
    seems to return bool, whether it was successful


getGamePadStatus[gfPadSystem]:
    copies requested gfPadStatus
    r3: gfPadSystem*
    r4: index
    r5: result buffer
    seems to always return 1


getPadInput[ipPadConfig]:
    Converts gfPadStatus into ipSwitch padStatus
    Calls the conversion function that corresponds to the controller type
    r3: ipPadConfig*
    r4: port, 0 based
    r5: gfPadStatus*
    r6: ipSwitch::padStatus* result


getInstance[ipPadConfig]:
    returns ipPadConfig*


exit[scMelee]:
    @ 806d483c
    Part of a group of functions, like stopGameFirst[scMelee] and stopGame[scMelee]
    Called when game ends
    If you want to end the game, just clear 0x20 bit from scMelee + 0xD8
    It will call all of the shutdown functions ASAP


_processLoad[gfCollectionIO]
    r26 is constant gfCollectionIO*


setSection[nteSection]:
    @ 80153504
    r3: nteSection*
    r4: data*
    Checks to see if specific magic values are in the correct place, and then checks the CRC32
    sets the data* at nteSection* + 0
    returns true if correct

requestLoadSD[gfCollectionIO]:
    @ 800397b0
    r3: gfCollectionIO*
    r4: collection type (2 for replays, 1 for photos, maybe more)
    r5: char* file name (just name, not path)
    Makes a thread that loads collection file and checks if it is valid
    Sets gfCollectionIO.isFinished when done
    Sets gfCollectionIO.summaryErrorCode if it encounters error
