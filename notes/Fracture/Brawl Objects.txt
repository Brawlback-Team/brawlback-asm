Array of 9 ftSlots at 80624810 (not sure if constant) (got by [[80B87C50]])
Indexed by port

Replay frame count is at 91301f48 and 91301c06 (probably 91301c06 is used)
Replay size is at 91301f44 and 91301c10 (91301c10 is used)

Fighter ID is GMKind

Input last taken here: 80784638 (getTrigger) Save slot 8 (5-7 work up to it)

(half)[[GameGlobal + 8] + 3A] = stage index

header byte & 0x70 >> 4 (number of words (after player inputs))

memory areana low is the highest memory location allocated by the game (doesn't care about MEMAllocations that I do)

80017848

current thread [800000E4]

805a06f8 is bitset of threads of a given priority
805a06f4 seems to mean a thread was just created, or maybe is a bool that is true when at least one thread is waiting
804dd870 start of thread array.  Each element is a doubly linked list (2 thread*, 8 bytes total) Threads are given an index based on priority

syncCommand numbers:
    0 = replay callback
    6 = no contest
    5 = stOperatorInfoMelee
    1 = stOperatorRuleMelee
    notify_SyncCommand
    Have only encountered 0 and 6

section (my name):
    0: (long) WiiID
    8: high time word
    C: low time word
    10: circular dependancy check result
    14: globalRumble | ((WiiDistubutionType << 5) & 0xFF)
    15: (byte) 2 (data type, 2 for replays)
    16: (byte) 0 (dunno)
    17: (byte) DB (magic number?)
    18: origonal buffer size (not including this header)
    1C: buffer size after compression


replayInfoThing (my name):
    94: (half) stage id (sr stage kind)


muCollectionViewer:
	base class for collections
	1AC: ResourcePack*

muReplayTask:
	inherits from muCollectionViewer
	


muCollection:
	Might be static, at least for replay
	size seems to be 1D40, might be dependent on exact derived class
	Actually might be same for all muColletionViewers
	Seems to contain a bunch of info for muCollectionViewer
	inherits gfTask
	1A0: where to look for replays, 0 = Wii, 1 = SD.  Used as an index, so probbly generalizes for other viewers
	1A4: array of file handle array ptrs.  4 words per element.  1st look like some kind of bit flags, 2nd is size of pointed to array, 3rd is ptr, 4th is possibly index in this arrray
	380-383: byte optins for starting file scan
	1B40: currentFileID.  Updates as soon as movement begins (815e83e0)
	1BFC: index to function list.  Used by controlProc[muCollectionViewer]. 4 causes current highlighted replay to play, even if corupted.  5 causes you to leave the menu
	1CE4: thing*.   Thing* + 0x350 is some kind of flag that controls replay loading.  SHould be 0 to load.  +0x354 should also be 0
	1D10: some kind of flag.  need to set to 0 to make replay load


PADStatus:
    804F67B0


#This object probably has bad offsets
#old info not matching up when checking again
gfCollectionIO:
    4C (5C?): gfFileIOHandle
    60: seems to be _proccessSummary error code.  Defaults to -1, 0 if no errors
    E4: collection data ptr
    E8: size (of file)
    EC: seems to be data type (2 for replays) (Doesn't seem accurate, it was 5 for replay)

    F0: Seems to be some other object starting here
    F4: filesystem type (1 = SD, 0 = VF)
    F8: collection type (1 for pictures, 2 for replays)
    Other nearby stuff might be how far along it is for reading everything
    Look at requestListSD[gfCollectionIO] at 80039a04 for more info
    Also probably the other request lists


gfFileIOHandle:
    0: gfFileIO*

gfFileIO:
    0: string* (filepath)
    4: file open options? (0 for write = "w", 1 for write = "a")
    8: file size
    C: source* (used when writing)
    10: dest* (used when reading)
    14: magic 0xC80

gfFileIORequest:
    0: gfFileIO
    18: params
    1C: (half) CR16 hash

soStatusModuleImpl:
    34: action state

soWorkManageModuleImpl:
    0: function table ptr
    10: function table ptr (observers)
    20: soGeneralWorkSimple*
    24: soGeneralWorkSimple* (belongs to specific fighter)

soGeneralWorkSimple:
    0: functin table ptr
    8: function table ptr
    C: Basic variables ptr
    10: Basic variables size (number of bytes / 4)
    14: Floats variables ptr
    18: Floats variables size (number of bytes / 4)
    1C: Bits variables ptr
    20: Bits variables size (number of bytes / 4)

IpKeyRecorder:
    @ 805bbfc0 (probably static)
    0: game setting (match: 2, replay: 1, else: 0).  Set to 2 by startRec @ 8004b5d0
    24: replay buffer start
    28: current input data address
    2C: replay buffer end
    38: seems to be 100 if active?
    3C: 1 if game paused, else 0
    40: seems to be 1 if in results screen
    5C: (char) bit mask of players (least significant is port 1) (only cares about human players)
    5E: (char) sync command type
    60: array of int, used for file sync
    78: size of file sync array (rest this when reading)
    7C: some random value

ipPadConfig:
    @ [805A00C8]
    has button -> input settings (custom controls)

IpSwitch:
    @ 805bc060
    8-14: player inputs by port
    18: ipKeyRecorder*
    24: some bitflags.  most significant bit seems to control whether to use replay or human inputs.  Setting the flag early enough also connects the human controller (Not understood)

aiChrIdx:

aiMgr:
    this or aiChrIdx inherits each other

IpHuman:
    inherits aiInput
    4: function table ptr
    8: controller index (0 based, wiimotes have higher indicies, cpus are -1, nana when cpu is -1, nana when human is human port)
    C: input
    10: x control stick
    14: y control stick
    2C: entryID
    30: ftKind
    42: aiChrIdx
    110: ai

soPostureModuleImpl:
    0: ptr to function table
    8: *soModuleAccesor
    C: (float) current xPos
    10: (float) current yPos
    14: (float) current zPos
    18: (float) previous xPos
    1C: (float) previous yPos
    20: (float) previous zPos
    40: (float) facing direction (left = -1, right = 1)

soControllerImpl:
    0: ptr to function table
    8: current X stick (includes cStick effect)
    C: current Y stick (include CStick effect)
    10: previous X stick
    14: previous Y Stick
    38: current trigger (seems to be biggest?) {only counts if set to shield}
    3C: previous trigger (seems to be biggest?) (only counts if set to shield)
    44: current inputs
    48: last frame inputs
    50: pressed inputs
    54: released inputs

ftControllerModuleImpl:
    0: ptr to function table
    4: ptr to function table (seems to contain observers/notifiers)
    2C: ptr to soModuleAccessor
    30: soControllerImpl object

gmGlobalModeMelee(name taken from function):
    thing at 90180f20 that contains the WatchPlayerInitData and other stuff
    1B: byte, stage index

gmPlayerInitData:
    Thing at 90180fb8

ftCommonDataAccessor:
    @ 80b87fcc

muSelCharTask:
    5C8: (byte) is team

muSelctChrList:
	44: current position in list, -1 if on top "new entry", is set immediatly when movement starts
	48: postion in list, is not changed until movement stops
	50: 8 char "PLAYER #", default name
	6C: number of names
	70: array of 2 byte indicies of tags.  Tags are not nescisarily in same order as in memory

gmMeleeInitData:
    


gmGlobalModeMelee:
    8: gmMeleeInitData
    98: gmPlayerInitData[7]

GameFrame(kinda my name):
    4: frame number
    C: (float) frame delta
    14: Other Frame counter, keeps count in results and after game ends in menus

GameGlobal:
    @ [805a00E0] or 90181300
    0: ptr to timeing stuff
    8: gmGlobalModeMelee* (Its the beginign of the section with all the WatchPlayerInitData)
    1C: ptr to menu settings?
    24: menu stuff?
    28: menu stuff? (check these out)

MenuSettings(my name):
    2: (byte) match type (0:time, 1:stock, 2:coins)

mcProcRule1:
    
muRuleTask:

stLoaderStage:


ftSlotManager:
    @[80B87C50]
    Controls ftSlots
    0: ptr to array of ftSlots

ftSlot:
    @[ftSlotManger.0]
    0x158: num chars (ice climber are 2)
    0x15B: byte-costume index (read only) FF if none
    0: seems to be stage of loading (boot resorece set to 1, procces set to 2)
    1C: seems to be res ID
    18: related to res ID 

stOperatorApperanceFighter:
    74-80: ptrs to stLoaderPlayer obj (one per port) (seem to be allocated even if fighter is not loaded or seemlected)

stLoaderPlayer:
    inherits stLoader
    40: 
    48: port (or maybe slot number)

ftManager:
    staticly allocated at 80629a00
    154: ptr to ftEntryManger
    1D4: soEventManageModuleImpl object

ftAudianceManager:
    @ [80B87C30]
    0: ptr to ftAudianceImpl

aiMgr:
    @ [80B8A2D8]
    create calls _ct and some other stuff
    _ct also affects some other static memeory
    A0: in game?

ftAudianceImpl:

ftEntryManger:
    @ 80624780
    Has a circular array of ftEntry ptrs
    0: ptr to start of array of ftEntry objects
    4: array size
    8: start of vector
    8: ptr to function table
    C: ptr to function table
    10: (half) size and length data
    14: start of circular array
    38(14 + 4 * array size): array index for most recent addition (mod array size for real index)

soEventManageModuleImpl:
    0: useless function table ptr (only has single null function)
    8: actuall function table ptr
    10: (signed half) manageID

ftEntry:
    0: ptr to function table (only has delete)
    4: entryID
    8: (byte) fighter count
    28: ftOwnerImpl
    2C: ftInput
    30: ftkind
    34: Fighter*
    38: gmPlayerInitData* (seems to not be reliable, Ice clibmers have this set to ftKind)
    3C: sub FIghter ptr (only if Ice climbers?)
    5C: GMKind
    
ftOwnerImpl:
    4: IpHuman*
    C: function table ptr
    D54: subOwner (either not directly ftOwner or ftOwner is really small by itself (16 bytes))

gfTaskSchedularer:
    @ [805A0068]

gfTask:
    Is a doubly linked list
    0: *char (name of task)
    4: ptr to prevoius task
    8: ptr to next task
    32: (half) seems to be flags recording if a particular procces has been called (for default gfTask functions at least)
    3C: (seems to be something with taks) 80422f08 (this is defaulr gfTask function table)
    3C: changed since then, no is a ptr to a table of gfTask functions
    *Seems to be last attribute*

StageObject:
    inhertis from gfTask apparently
    Looks like thats how the proccess and procces begin stuff works
    44: (byte) isActive (active doesn't mean alive)

Weapon:
    inherits from stageObject

wnDummyFighter:
    inherits from Weapon
    Seems to be for character switching?

soAnimCmdEventObserver:

soLinkEventObserver:

soModuleEnumeration:

ftParamCustomizeModuleImpl:
    
fighter name ptr list (my name):
    @ 80ad8670

ftInfo:
    static @ 80B8942C

8059c668 seems to be proccess count

gfHeapManager:
    @ 804220c0

gfMemoryPool:
    Memory pools used by everything
    0: char* (name of heap)
    4: void* (beginign of heap)
    8: void* (end of heap)
    C: size of heap
    

soHeapModuleImpl:
    seems to be at 80ae61c8 (or might just be function tables or smething)
    (if it is just data table)
    0: 80ae61c8
    4: (byte)
    8: instanceHeap num
    C: modelInstanceHeap num
    10: motionInstanceHeap num
    14: getHeapSlotNumber num

Fighter:
    The one with all the modules
    inherits from StageObject
    -4: ptr to ftEntry (?)
    0: *char (name of task)
    60: ptr to soModuleAccessor
    48: soAnimCmdEventObserver object
    54: soLinkEventObserver object
    Bunch of observers
    10C: entryID
    110: ftKind (different than fighter index)

soModuleAccessor:
    d8: technically a ptr to the real list, but in practice real list is just ModuleList + 0xC
    (All offsets assume you aren't using 0xD8)
    8: ptr to Fighter
    C-whatever: soModuleEnumeration (module ptrs)

ftIke:
    subclass of Fighter


soSlow:
    Is in system memry, so maybe controls game speed?

ftInstanceManger:
    static @ 80b87c74


ftClassInfo:
    static @ 80b87e00
    use getCLassInfo (static method) to get ptr to class info
    8: ptr to ftClassInfoImpl    

gfPadSystem:
    805bacc0
    0: OSAlarm

scMelee:
	static @ 90ff50c0 ?
	64: stOperatorController*
	BC: thing used in process[scMelee] to determine what to do
	    Set to 0xB7C in replay to finish
	C0: flag used to end match? 1 normally, seems to need to be 2 to finish
	D8: (byte) flags
	    0x20 determines if should quit out of match.  if cleared, match ends as soon as possible
	        Setting it during countdown buffers match end as soon as GO! appears
	F4: (half) melee process counter

scFigureGetDemo:
	D8: byte, 0x22 in match, 0x2A in replay, probbaly bit flags
	8 bit is set in startPatch during replay, if most significant bitflag in ipSwitch is set

itManager:
	0x50 word, some kind of setting


gfSceneManager:
    @ 805b8ba0
    228: scene? 1 if in game, 2 causes exit[scMelee] to be called
    #the 228 might be the same as 288, and just a typo.  288 is definitly correct
    288: (byte) sceneState? 1 if scene is running, 2 causes exit method of scene to be called

nteSection:
    0: data* (unkown type, but defintly not just void*)
